// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define User data model
model User {
  id           Int          @id @default(autoincrement())
  userName     String?
  email        String       @unique
  password     String
  diskSpace    BigInt       @default(104857600)
  usedSpace    BigInt       @default(0)
  avatar       String?
  role         String       @default("USER")
  files        File[]
  isActivated  Boolean      @default(false)
  // activationToken String?
  refreshToken String?
  userConfigs  UserConfig[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Invite       Invite[]
}

// Define File data model
model File {
  id         Int       @id @default(autoincrement())
  name       String
  type       String?
  accessLink String?
  size       Int?      @default(0)
  path       String?   @default("")
  url        String?   @default("")
  parentId   Int?
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int
  parent     File?     @relation("ChildToParent", fields: [parentId], references: [id])
  childs     File[]    @relation("ChildToParent")
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model UserConfig {
  id        Int      @id @default(autoincrement())
  language  String?  @default("ENG")
  theme     String?  @default("DARK")
  userId    Int
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define Invite data model
model Invite {
  id              Int      @id @default(autoincrement())
  userName        String?
  email           String   @unique
  password        String
  activationToken String   @unique
  isUsed          Boolean  @default(false)
  user            User?    @relation(fields: [userId], references: [id])
  userId          Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
